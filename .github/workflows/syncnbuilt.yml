name: Sync n' Built

on:
  #schedule:
  #  - cron: "*/5 * * * *"
  workflow_dispatch:
    inputs:
      version:
        description: 'Enter the version manually (or fallback to latest if invalid)'
        required: true 
        default: 'manual'

jobs:
  sync-with-upstream:
    runs-on: ubuntu-latest
    outputs:
      changes-detected: ${{ steps.check.outputs.changes }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PAT }}
          fetch-depth: 0

      - name: Set up Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Add upstream and fetch
        run: |
          git remote add upstream https://github.com/khcrysalis/Feather.git
          git fetch upstream

      - name: Merge upstream/main (favor theirs)
        run: |
          git merge upstream/main --allow-unrelated-histories --no-edit || true
          if [ -n "$(git ls-files -u)" ]; then
            echo "Conflicts detected. Favoring upstream..."
            git checkout --theirs .
            git add .
            git commit -m "Merge upstream (auto-resolved with theirs)"
          fi

      - name: Check if new commits were added
        id: check
        run: |
          git fetch origin
          if [ "$(git rev-parse HEAD)" = "$(git rev-parse origin/main)" ]; then
            echo "changes=false" >> "$GITHUB_OUTPUT"
          else
            git push origin main
            echo "changes=true" >> "$GITHUB_OUTPUT"
          fi

  build-feather:
    needs: sync-with-upstream
    if: github.event_name == 'workflow_dispatch' || needs.sync-with-upstream.outputs.changes-detected == 'true'
    continue-on-error: true
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 'latest'

      - name: Set metadata
        run: |
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          echo "TAG=featherrelease-${SHORT_SHA}" >> "$GITHUB_ENV"
          echo "RELEASE_NAME=Feather Rewrite Test Release $SHORT_SHA" >> "$GITHUB_ENV"
          echo "ARCHIVE_NAME=Feather" >> "$GITHUB_ENV"
          echo "OUTPUT_NAME=Feather-v2.ipa" >> "$GITHUB_ENV"

      - name: Archive Build
        run: |
          xcodebuild clean archive \
            -project Feather.xcodeproj \
            -scheme Feather \
            -configuration Release \
            -archivePath build/Feather.xcarchive \
            -sdk iphoneos \
            -destination 'generic/platform=iOS' \
            ONLY_ACTIVE_ARCH=YES \
            ARCHS=arm64 \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            SWIFT_OPTIMIZATION_LEVEL="-Owholemodule" \
            IPHONEOS_DEPLOYMENT_TARGET=17.4 \
            -skipPackagePluginValidation

      - name: Create unsigned IPA
        run: |
          mkdir -p build/Payload
          APP_PATH="build/Feather.xcarchive/Products/Applications/Feather.app"
          cp -R "$APP_PATH" build/Payload/
          cd build
          zip -r "Feather-v2.ipa" Payload

      - uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG }}
          name: ${{ env.RELEASE_NAME }}
          files: build/Feather-v2.ipa
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-feather-idevice:
    needs: sync-with-upstream
    if: github.event_name == 'workflow_dispatch' || needs.sync-with-upstream.outputs.changes-detected == 'true'
    continue-on-error: true 
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 'latest'

      - name: Set metadata
        run: |
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          echo "TAG=featherrelease-${SHORT_SHA}" >> "$GITHUB_ENV"
          echo "RELEASE_NAME=Feather Rewrite Test Release $SHORT_SHA" >> "$GITHUB_ENV"
          echo "ARCHIVE_NAME=Featheridevice" >> "$GITHUB_ENV"
          echo "OUTPUT_NAME=Feather-idevice.ipa" >> "$GITHUB_ENV"

      - name: Archive Build
        run: |
          xcodebuild clean archive \
            -project Feather.xcodeproj \
            -scheme Feather-idevice \
            -configuration Release \
            -archivePath build/Featheridevice.xcarchive \
            -sdk iphoneos \
            -destination 'generic/platform=iOS' \
            ONLY_ACTIVE_ARCH=YES \
            ARCHS=arm64 \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            SWIFT_OPTIMIZATION_LEVEL="-Owholemodule" \
            IPHONEOS_DEPLOYMENT_TARGET=17.4 \
            -skipPackagePluginValidation

      - name: Create unsigned IPA
        run: |
          mkdir -p build/Payload
          APP_PATH="build/Featheridevice.xcarchive/Products/Applications/Feather-idevice.app"
          cp -R "$APP_PATH" build/Payload/
          cd build
          zip -r "Feather-idevice.ipa" Payload

      - uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG }}
          name: ${{ env.RELEASE_NAME }}
          files: build/Feather-idevice.ipa
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  generate-altstore-repo:
    needs: [build-feather, build-feather-idevice]
    if: always()
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3

      - name: Fetch release assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir -p public
          VERSION="${{ github.event.release.tag_name || github.event.inputs.version || 'manual' }}"
          
          RELEASE_METADATA=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${VERSION}" || \
            curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/releases/latest")

          if [ -z "$RELEASE_METADATA" ]; then
            echo "Error: Release metadata could not be fetched. Exiting."
            exit 1
          fi

          RELEASE_ID=$(echo "$RELEASE_METADATA" | jq -r '.id')
          if [ -z "$RELEASE_ID" ]; then
            echo "Error: Could not determine release ID. Exiting."
            exit 1
          fi
          echo "Using release ID: $RELEASE_ID"

          ASSETS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID/assets" | jq -c '.[] | select(.name | endswith(".ipa"))')

          if [ -z "$ASSETS" ]; then
            echo "No .ipa assets found for this release. Exiting."
            exit 0
          fi

          echo "$ASSETS" | while read -r asset; do
            NAME=$(echo "$asset" | jq -r '.name')
            DOWNLOAD_URL=$(echo "$asset" | jq -r '.url')
            if [ -n "$NAME" ] && [ -n "$DOWNLOAD_URL" ]; then
              echo "Downloading $NAME from $DOWNLOAD_URL..."
              curl -L -H "Authorization: token $GITHUB_TOKEN" \
                   -H "Accept: application/octet-stream" \
                   "$DOWNLOAD_URL" -o "public/$NAME" || echo "Failed to download $NAME"
            else
              echo "Error: Missing fields (name or URL) in asset metadata."
            fi
          done

      - name: Extract icons and generate metadata
        run: |
          mkdir -p public/icons
          DATE="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          VERSION="${{ github.event.release.tag_name || github.event.inputs.version || 'manual' }}"

          cat <<EOF > public/apps.json
{
  "name": "Feather v2 Alpha Test",
  "identifier": "pidev.feather.testing",
  "iconURL": "https://ratsknarp.github.io/featherstar/featheralpha.png",
  "apps": [
EOF

          FIRST=true
          for IPA in public/*.ipa; do
            TMP_DIR=$(mktemp -d)
            unzip -q "$IPA" -d "$TMP_DIR"
            APP_DIR=$(find "$TMP_DIR/Payload" -name "*.app" | head -n 1)
            PLIST="$APP_DIR/Info.plist"

            NAME=$(/usr/libexec/PlistBuddy -c "Print :CFBundleDisplayName" "$PLIST" 2>/dev/null || /usr/libexec/PlistBuddy -c "Print :CFBundleName" "$PLIST")
            BUNDLE_ID=$(/usr/libexec/PlistBuddy -c "Print :CFBundleIdentifier" "$PLIST")
            VERSION_NUM=$(/usr/libexec/PlistBuddy -c "Print :CFBundleShortVersionString" "$PLIST")
            BUILD_NUM=$(/usr/libexec/PlistBuddy -c "Print :CFBundleVersion" "$PLIST")

            ICON_PATH=$(find "$APP_DIR" -name "*AppIcon*.png" | sort | tail -n1)
            OUTPUT_ICON="icons/${BUNDLE_ID//./_}.png"
            if [ -f "$ICON_PATH" ]; then
              cp "$ICON_PATH" "public/$OUTPUT_ICON"
            else
              OUTPUT_ICON="feather.png"
            fi

            IPA_NAME=$(basename "$IPA")

            if [ "$FIRST" = true ]; then FIRST=false; else echo "," >> public/apps.json; fi

            cat <<EOF >> public/apps.json
{
  "name": "$NAME",
  "bundleIdentifier": "$BUNDLE_ID",
  "developerName": "Samara",
  "version": "$VERSION_NUM ($BUILD_NUM)",
  "versionDate": "$DATE",
  "downloadURL": "https://ratsknarp.github.io/featherstar/$IPA_NAME",
  "iconURL": "https://ratsknarp.github.io/featherstar/$OUTPUT_ICON",
  "localizedDescription": "Auto-extracted metadata for $NAME.",
  "subtitle": "$NAME",
  "tintColor": "0099ff",
  "size": 0
}
EOF

            rm -rf "$TMP_DIR"
          done

          echo "]}" >> public/apps.json

      - name: Deploy to gh-pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
          publish_branch: gh-pages
