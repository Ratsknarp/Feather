name: Sync n' Built

on:
  #schedule:
  #  - cron: "*/5 * * * *"
  workflow_dispatch:
    inputs:
      version:
        description: 'Enter the version manually (or fallback to latest if invalid)'
        required: true 
        default: 'manual'

jobs:
  sync-with-upstream:
    runs-on: ubuntu-latest
    outputs:
      changes-detected: ${{ steps.check.outputs.changes }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PAT }}
          fetch-depth: 0

      - name: Set up Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Add upstream and fetch
        run: |
          git remote add upstream https://github.com/khcrysalis/Feather.git
          git fetch upstream

      - name: Merge upstream/main (favor theirs)
        run: |
          git merge upstream/main --allow-unrelated-histories --no-edit || true
          if [ -n "$(git ls-files -u)" ]; then
            echo "Conflicts detected. Favoring upstream..."
            git checkout --theirs .
            git add .
            git commit -m "Merge upstream (auto-resolved with theirs)"
          fi

      - name: Check if new commits were added
        id: check
        run: |
          git fetch origin
          if [ "$(git rev-parse HEAD)" = "$(git rev-parse origin/main)" ]; then
            echo "No new changes."
            echo "changes=false" >> "$GITHUB_OUTPUT"
          else
            echo "New changes detected."
            git push origin main
            echo "changes=true" >> "$GITHUB_OUTPUT"
          fi

  build-feather:
    name: Build Feather
    needs: sync-with-upstream
    if: github.event_name == 'workflow_dispatch' || needs.sync-with-upstream.outputs.changes-detected == 'true'
    runs-on: macos-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 'latest'

      - name: Build and Package IPA
        run: |
          xcodebuild clean archive \
            -project Feather.xcodeproj \
            -scheme Feather \
            -configuration Release \
            -archivePath build/Feather.xcarchive \
            -sdk iphoneos \
            -destination 'generic/platform=iOS' \
            ONLY_ACTIVE_ARCH=YES \
            ARCHS=arm64 \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            SWIFT_OPTIMIZATION_LEVEL="-Owholemodule" \
            IPHONEOS_DEPLOYMENT_TARGET=17.4 \
            -skipPackagePluginValidation

          mkdir -p build/Payload
          cp -R build/Feather.xcarchive/Products/Applications/Feather.app build/Payload/
          cd build
          zip -r Feather-v2.ipa Payload

      - name: Upload Feather IPA
        uses: actions/upload-artifact@v3
        with:
          name: Feather-v2
          path: build/Feather-v2.ipa

  build-feather-idevice:
    name: Build Feather-idevice
    needs: sync-with-upstream
    if: github.event_name == 'workflow_dispatch' || needs.sync-with-upstream.outputs.changes-detected == 'true'
    runs-on: macos-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 'latest'

      - name: Build and Package IPA
        run: |
          xcodebuild clean archive \
            -project Feather.xcodeproj \
            -scheme Feather-idevice \
            -configuration Release \
            -archivePath build/Featheridevice.xcarchive \
            -sdk iphoneos \
            -destination 'generic/platform=iOS' \
            ONLY_ACTIVE_ARCH=YES \
            ARCHS=arm64 \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            SWIFT_OPTIMIZATION_LEVEL="-Owholemodule" \
            IPHONEOS_DEPLOYMENT_TARGET=17.4 \
            -skipPackagePluginValidation

          mkdir -p build/Payload
          cp -R build/Featheridevice.xcarchive/Products/Applications/Feather-idevice.app build/Payload/
          cd build
          zip -r Feather-idevice.ipa Payload

      - name: Upload Feather-idevice IPA
        uses: actions/upload-artifact@v3
        with:
          name: Feather-idevice
          path: build/Feather-idevice.ipa

  generate-altstore-repo:
    name: Generate AltStore Repo
    needs: [build-feather, build-feather-idevice]
    if: always()
    runs-on: macos-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path: public

      - name: Install dependencies
        run: |
          brew install imagemagick
          brew install pngcheck

      - name: Extract icons and metadata
        run: |
          mkdir -p public/icons
          DATE="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          VERSION="${{ github.event.release.tag_name || github.event.inputs.version || 'manual' }}"

          echo '{
            "name": "Feather v2 Alpha Test",
            "identifier": "pidev.feather.testing",
            "iconURL": "https://ratsknarp.github.io/featherstar/featheralpha.png",
            "apps": [' > public/apps.json

          FIRST=true

          for IPA in public/**/**/*.ipa; do
            echo "Processing $IPA"
            TMP_DIR=$(mktemp -d)
            unzip -q "$IPA" -d "$TMP_DIR"

            APP_DIR=$(find "$TMP_DIR/Payload" -name "*.app" | head -n 1)
            PLIST="$APP_DIR/Info.plist"

            NAME=$(/usr/libexec/PlistBuddy -c "Print :CFBundleDisplayName" "$PLIST" 2>/dev/null || \
                  /usr/libexec/PlistBuddy -c "Print :CFBundleName" "$PLIST")
            BUNDLE_ID=$(/usr/libexec/PlistBuddy -c "Print :CFBundleIdentifier" "$PLIST")
            VERSION_NUM=$(/usr/libexec/PlistBuddy -c "Print :CFBundleShortVersionString" "$PLIST")
            BUILD_NUM=$(/usr/libexec/PlistBuddy -c "Print :CFBundleVersion" "$PLIST")

            ICON_FILE=$(defaults read "$APP_DIR/Info" CFBundleIcons | grep -A1 PrimaryIcon | grep CFBundleIconFiles | tail -n1 | cut -d'"' -f2 | sed 's/,$//')
            ICON_PATH=$(find "$APP_DIR" -name "${ICON_FILE}*.png" | sort | head -n1)

            OUTPUT_ICON="icons/${BUNDLE_ID//./_}.png"
            cp "$ICON_PATH" "public/$OUTPUT_ICON" || true

            IPA_NAME=$(basename "$IPA")

            [ "$FIRST" = false ] && echo "," >> public/apps.json || FIRST=false

            cat <<EOF >> public/apps.json
{
  "name": "$NAME",
  "bundleIdentifier": "$BUNDLE_ID",
  "developerName": "Samara",
  "version": "$VERSION_NUM ($BUILD_NUM)",
  "versionDate": "$DATE",
  "downloadURL": "https://ratsknarp.github.io/featherstar/$IPA_NAME",
  "iconURL": "https://ratsknarp.github.io/featherstar/$OUTPUT_ICON",
  "localizedDescription": "Auto-extracted metadata for $NAME.",
  "subtitle": "$NAME",
  "tintColor": "0099ff",
  "size": 0
}
EOF
            rm -rf "$TMP_DIR"
          done

          echo "]}" >> public/apps.json

      - name: Deploy to gh-pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
          publish_branch: gh-pages
